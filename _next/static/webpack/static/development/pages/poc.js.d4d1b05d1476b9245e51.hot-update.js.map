{"version":3,"file":"static/webpack/static/development/pages/poc.js.d4d1b05d1476b9245e51.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/core-js/parse-float.js","webpack:///./node_modules/core-js/library/fn/parse-float.js","webpack:///./node_modules/core-js/library/modules/_parse-float.js","webpack:///./node_modules/core-js/library/modules/es6.parse-float.js","webpack:///./pages/poc.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/parse-float\");","require('../modules/es6.parse-float');\nmodule.exports = require('../modules/_core').parseFloat;\n","var $parseFloat = require('./_global').parseFloat;\nvar $trim = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n","import React, { useContext, useEffect, useState } from \"react\";\nimport * as d3 from 'd3';\nimport xlsx from 'xlsx';\nimport { ResponsiveLine } from \"@nivo/line\";\nimport { useFormik } from \"formik\";\n\nimport { Context } from \"../context\";\nimport { fetchCareers, postSimpleForm } from \"../services/api\";\n\nimport { withProvider } from \"../components/Layout\";\n\nconst SimpleForm = () => {\n  const [raw, setRaw] = useState(false);\n  const [salaryPlotData, setSalaryPlotData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:3000/data.xlsx')\n\n    .then(response => response.arrayBuffer())\n    .then(blob => {\n        const raw = xlsx.read(new Uint8Array(blob), {type:\"array\"})\n        setRaw(raw)\n        const emp = xlsx.utils.sheet_to_csv(raw.Sheets.emp)\n        const json = d3.csvParse(emp)\n        let data = json.map(row => { return { x: parseInt(row.age), y: parseFloat(row.salaire) } })\n        setSalaryPlotData([{ id: 'id', data }]);\n    })\n  }, []);\n\n\n  return (\n    <div style={{ height: \"80vh\" }}>\n      <h1>TEST</h1>\n            <ResponsiveLine\n        data={salaryPlotData}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{ type: \"point\" }}\n        yScale={{\n          type: \"linear\",\n          min: \"auto\",\n          max: \"auto\",\n          stacked: true,\n          reverse: false\n        }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          orient: \"bottom\",\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: \"Ã‚ge\",\n          legendOffset: 36,\n          legendPosition: \"middle\"\n        }}\n        axisLeft={{\n          orient: \"left\",\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: \"Salaire\",\n          legendOffset: -40,\n          legendPosition: \"middle\"\n        }}\n        colors={{ scheme: \"nivo\" }}\n        pointSize={10}\n        pointColor={{ theme: \"background\" }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: \"serieColor\" }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n          {\n            anchor: \"bottom-right\",\n            direction: \"column\",\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: \"left-to-right\",\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: \"circle\",\n            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n            effects: [\n              {\n                on: \"hover\",\n                style: {\n                  itemBackground: \"rgba(0, 0, 0, .03)\",\n                  itemOpacity: 1\n                }\n              }\n            ]\n          }\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default withProvider(SimpleForm);\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAfA;AAxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoEA;AACA;AACA;;;;A","sourceRoot":""}